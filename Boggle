/*
 * File: Boggle.cpp
 * -----------------------
 * Name: [TODO: enter name here]
 * This file is the starter code for the Boggle Game problem
 * from Assignment #4.
 * [TODO: extend the documentation]
 */

#include <cctype>
#include <fstream>
#include <iostream>
#include "gboggle.h"
#include "grid.h"
#include "gwindow.h"
#include "lexicon.h"
#include "random.h"
#include "simpio.h"
#include "sound.h"
#include "console.h"

using namespace std;

const int BOGGLE_WINDOW_WIDTH = 650;
const int BOGGLE_WINDOW_HEIGHT = 350;
const int kPauseTime = 50;
string STANDARD_CUBES_FIlE = "cubes16.txt";
string BIG_BOGGLE_CUBES_FILE = "cubes25.txt";
string EnglishLexicon =  "EnglishWords.txt";
enum Direction {
  Northwest, North, Northeast, East, Southeast, South, Southwest, West
};
string kStandardCubes[16];
string kBigBoggleCubes[25];
struct Cube // for dice
{
    bool flag;
    char letter;
    int row;
    int col;
};
struct Game // for board
{
    Grid<Cube> board;
    Lexicon english;
    Lexicon alreadyPlayed;
};

/* Function prototypes */

void welcome();
void giveInstructions();
void playBoggle();
Grid<Cube> shuffle(int numOfRowsCols);
void chooseBoard(Game &g);
void customBoardConfig(Game &g, int numOfCubes);
void autoBoardConfig(Game &g, int numOfCubes);
void humanturn(Game &g);
void computerTurn(Game &g);
bool isLegal(Game &g, string input);
bool canBeFormed(Game &g, Cube c, string input);
void highlightCubes(Game &g);
void clearAllHighlights(Game &g);
Cube adjacentCube(Game &g, Direction &dir, int row, int col);
void compCanBeFormed(Game &g, Cube c, Player player, string word);
bool inSameLocation(Cube c1, Cube c2);
bool compLegalWord(Game &g, string word);
/* Main program */

// You need to design specific data structures and functions
// to complete this assignment.

int main() {
    fstream infile1("cubes16.txt"),infile2("cubes25.txt");
    for(int i=0;i<16;i++)
        infile1 >> kStandardCubes[i];
    for(int i=0;i<25;i++)
        infile2 >> kBigBoggleCubes[i];
    welcome();
    if (getYesOrNo("Do you need instructions? ")) {
       giveInstructions();
    }

   playBoggle();
   return 0;
}

/*
 * Function: welcome
 * Usage: welcome();
 * -----------------
 * Print out a cheery welcome message.
 */

void welcome() {
   cout << "Welcome!  You're about to play an intense game ";
   cout << "of mind-numbing Boggle.  The good news is that ";
   cout << "you might improve your vocabulary a bit.  The ";
   cout << "bad news is that you're probably going to lose ";
   cout << "miserably to this little dictionary-toting hunk ";
   cout << "of silicon.  If only YOU had a gig of RAM..." << endl << endl;
}

/*
 * Function: giveInstructions
 * Usage: giveInstructions();
 * --------------------------
 * Print out the instructions for the user.
 */

void giveInstructions() {
   cout << endl;
   cout << "The boggle board is a grid onto which I ";
   cout << "I will randomly distribute cubes. These ";
   cout << "6-sided cubes have letters rather than ";
   cout << "numbers on the faces, creating a grid of ";
   cout << "letters on which you try to form words. ";
   cout << "You go first, entering all the words you can ";
   cout << "find that are formed by tracing adjoining ";
   cout << "letters. Two letters adjoin if they are next ";
   cout << "to each other horizontally, vertically, or ";
   cout << "diagonally. A letter can only be used once ";
   cout << "in each word. Words must be at least four ";
   cout << "letters long and can be counted only once. ";
   cout << "You score points based on word length: a ";
   cout << "4-letter word is worth 1 point, 5-letters ";
   cout << "earn 2 points, and so on. After your puny ";
   cout << "brain is exhausted, I, the supercomputer, ";
   cout << "will find all the remaining words and double ";
   cout << "or triple your paltry score." << endl << endl;
   cout << "Hit return when you're ready...";
   getLine();
}

void playBoggle() {

    //  [TODO: Fill and extend code here]

    GWindow gw(BOGGLE_WINDOW_WIDTH, BOGGLE_WINDOW_HEIGHT);
    gw.setLocation(50,50);
    initGBoggle(gw);

    while (true) {
        Game g;
        g.english = Lexicon(EnglishLexicon);
        chooseBoard(g);
        humanturn(g);
        computerTurn(g);
        if (!getYesOrNo("Would you like to play again? ")) break;
    }

    exitGraphics();
}
void chooseBoard(Game &g)
{
    int num;
    cout << "Would you want play the 4x4 board(S) or 5x5(B) board?" << endl;
    char op;
    cin >> op;
    if(op=='S' || op=='s')
        num = 4;
    else
        num = 5;
    drawBoard(num,num);
    cout << "Would you like to set up the board by yourself or not?" << endl;
    string ans;
    cin >> ans;
    if(toupper(ans[0])=='Y')
        customBoardConfig(g,num);
    else
        autoBoardConfig(g,num);
}
void customBoardConfig(Game &g, int numofRowsCols)
{
    cout << endl;
    cout << "Enter " << numofRowsCols << " " << numofRowsCols << "-strings(Please input the Upper case)" << endl;

    string userInput[numofRowsCols];
    for(int i=0;i<numofRowsCols;i++)
        cin >> userInput[i];
    Grid<Cube> cubes(numofRowsCols,numofRowsCols);
    for(int i=0;i<numofRowsCols;i++)
    {
        for(int j=0;j<numofRowsCols;j++)
        {
            char letter = userInput[i][j];
            labelCube(i,j,letter);
            Cube cube = {false, letter, i, j};
            cubes[i][j] = cube;
        }
    }
    g.board = cubes;

}
void autoBoardConfig(Game &g, int numOfRowsCols)
{
    Grid<Cube> cubes = shuffle(numOfRowsCols);
    g.board = cubes;
    for(int i=0;i<numOfRowsCols;i++)
    {
        for(int j=0;j<numOfRowsCols;j++)
        {
            char letter = cubes[i][j].letter;
            labelCube(i,j,letter);
        }
    }
}
Grid<Cube> shuffle(int numOfRowsCols)
{
    Vector<string> vec;
    while(vec.size()<numOfRowsCols)
    {
        int index = randomInteger(0,numOfRowsCols*numOfRowsCols-1);
        if(vec.contains(kStandardCubes[index]))
            continue;
        else
            vec.add(kStandardCubes[index]);
    }
    for(int i=0;i<numOfRowsCols;i++)
    {
        for(int j=0;j<numOfRowsCols;j++)
        {
            int index = randomInteger(0,numOfRowsCols-1);
            swap(vec[i][j],vec[i][index]);
        }
    }
    Grid<Cube> ans(numOfRowsCols,numOfRowsCols);
    for(int i=0;i<numOfRowsCols;i++)
        for(int j=0;j<numOfRowsCols;j++)
        {
            ans[i][j].row = i;
            ans[i][j].col = j;
            ans[i][j].flag = false;
            ans[i][j].letter = vec[i][j];
        }
    return ans;
}
void humanturn(Game &g)
{
    Player player = HUMAN;
    cout << "Please enter the words in the table you can find:(input -1 to exit)" << endl;
    while(true)
    {
        string input;
        cin >> input;
        if(input=="-1")
            break;
        input = toUpperCase(input);
        foreach(Cube c, g.board)
        {
            c.flag = false;
            highlightCube(c.row, c.col, false);
        }
        if(input.length()<4)
            cout << "The word's length is at least 4" << endl;
        else if(!(g.english).contains(input))
            cout << "That is not a word!" << endl;
        else if((g.alreadyPlayed).contains(input))
            cout << "The word has been chosen!" << endl;
        else if(!isLegal(g,input))
            cout << "You can not make that word!" << endl;
        else
        {
            cout << "Congratulations! You got one correct word!" << endl;
            g.alreadyPlayed.add(input);
            recordWordForPlayer(input,player);

        }
    }
}

bool isLegal(Game &g, string input)
{
    string prefix = input.substr(0,2);
    if((g.english).containsPrefix(prefix))
    {
        foreach(Cube c, g.board)
            if(canBeFormed(g,c,input))
                return true;
    }
    return false;
}
bool canBeFormed(Game &g, Cube c, string input)
{
    if(input[0]!=c.letter)
        return false;
    (g.board[c.row][c.col]).flag = true;
    string str = input.substr(1);
    if(str.length()==0) //basecase，递归终点
    {
        highlightCubes(g);
        pause(kPauseTime);
        clearAllHighlights(g);
        (g.board[c.row][c.col]).flag = false;
        return true;
    }
    for(Direction dir = Northwest; dir<=West;dir=Direction(dir+1))
    {
        Cube nextCube = adjacentCube(g,dir,c.row,c.col);
        if(!nextCube.flag && canBeFormed(g,nextCube,str))
        {
            (g.board[c.row][c.col]).flag = false;
            return true;
        }
    }
    (g.board[c.row][c.col]).flag = false;
    return false;
}
Cube adjacentCube(Game &g, Direction &dir, int row, int col)
{
    Cube c2 = g.board[row][col];
    int maxRow = (g.board).numRows()-1;
    int maxCol = (g.board).numCols()-1;
    switch(dir) {
        case Northwest:
            if(row != 0 && col != 0) c2 = g.board[row-1][col-1]; break;
        case North:
            if(row != 0) c2 = g.board[row-1][col]; break;
        case Northeast:
            if(row != 0 && col != maxCol) c2 = g.board[row-1][col+1]; break;
        case East:
            if(col != maxCol) c2 = g.board[row][col+1]; break;
        case Southeast:
            if(row != maxRow && col != maxCol) c2 = g.board[row+1][col+1]; break;
        case South:
            if(row != maxRow) c2 = g.board[row+1][col]; break;
        case Southwest:
            if(row != maxRow && col != 0) c2 = g.board[row+1][col-1]; break;
        case West:
            if(col != 0) c2 = g.board[row][col-1]; break;
      }
      return c2;
}
void highlightCubes(Game &g)
{
    foreach(Cube c, g.board)
    {
        if(c.flag)
            highlightCube(c.row,c.col,true);
    }
}
void clearAllHighlights(Game &g)
{
    foreach(Cube c, g.board)
    {
        highlightCube(c.row, c.col, false);
    }
}
void computerTurn(Game &g)
{
    Player player = COMPUTER;
    string word;
    foreach(Cube c, g.board)
    {
        string word(1,c.letter);
        (g.board[c.row][c.col]).flag = true;
        highlightCube(c.row,c.col,true);
        compCanBeFormed(g,c,player,word);
        (g.board[c.row][c.col]).flag = false;
        highlightCube(c.row, c.col,false);
    }
}
void compCanBeFormed(Game &g, Cube c, Player player, string word)
{
    if(compLegalWord(g,word))
    {
        (g.alreadyPlayed).add(word);
        recordWordForPlayer(word,player);
        highlightCube(c.row,c.col,true);
        pause(kPauseTime);
        highlightCube(c.row, c.col, false);
    }
    for(Direction dir = Northwest; dir<=West; dir=Direction(dir+1))
    {
        Cube nextCube = adjacentCube(g,dir,c.row,c.col);
        string str = word+nextCube.letter;
        if(!nextCube.flag && (g.english).containsPrefix(str) && !(g.alreadyPlayed).contains(str) && !inSameLocation(c,nextCube))
        {
            (g.board[nextCube.row][nextCube.col]).flag = true;
            highlightCube(c.row, c.col, true);
            word = str;
            compCanBeFormed(g,nextCube,player, word);
            word = word.substr(0,word.length()-1);
            (g.board[c.row][c.col]).flag = false;
            highlightCube(c.row,c.col,false);
        }
    }
}
bool compLegalWord(Game &g, string word)
{
    return (word.length()>=4 && (g.english).contains(word) && !(g.alreadyPlayed).contains(word));
}
bool inSameLocation(Cube c1, Cube c2)
{
    return (c1.row==c2.row && c1.col==c2.col);
}
