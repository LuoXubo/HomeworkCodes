/*
 * File: Boggle.cpp
 * -----------------------
 * Name: [TODO: enter name here]
 * This file is the starter code for the Boggle Game problem
 * from Assignment #4.
 * [TODO: extend the documentation]
 */

#include <cctype>
#include <fstream>
#include <iostream>
#include <cmath>
#include "strlib.h"
#include "gboggle.h"
#include "grid.h"
#include "gwindow.h"
#include "lexicon.h"
#include "random.h"
#include "simpio.h"
#include "sound.h"
#include "console.h"

using namespace std;

const int BOGGLE_WINDOW_WIDTH = 650;
const int BOGGLE_WINDOW_HEIGHT = 350;
const int kStandardNumOfCubes = 16;
const int kBigBoogleNumOfCubes = 25;
const int kPauseTime = 50;
const string STANDARD_CUBES_FIlE = "cubes16.txt";
const string BIG_BOGGLE_CUBES_FILE = "cubes25.txt";
const string kEnglishLexicon = "EnglishWords.dat";
const string kStandardCubes[16] = {
    "AAEEGN","ABBJOO","ACHOPS","AFFKPS",
    "AOOTTW","CIMOTU","DEILRX","DELRVY",
    "DISTTY","EEGHNW","EEINSU","EHRTVW",
    "EIOSST","ELRTTY","HIMNOU","HLNNRZ"
};
const string kBigBoggleCubes[25] = {
  "AAAFRS", "AAEEEE", "AAFIRS", "ADENNN", "AEEEEM",
  "AEEGMU", "AEGMNN", "AFIRSY", "BJKQXZ", "CCNSTW",
  "CEIILT", "CEILPT", "CEIPST", "DDLNOR", "DDHNOT",
  "DHHLOR", "DHLNOR", "EIIITT", "EMOTTT", "ENSSSU",
  "FIPRSY", "GORRVW", "HIPRRY", "NOOTUW", "OOOTTU"
};
enum Direction{
    Northwest, North, Northeast, East, Southeast, South, Southwest, West
};

/* Function prototypes */
struct Cube
{
    bool flag;
    char letter;
    int row;
    int col;
};
struct Game
{
    Grid<Cube> board;
    Lexicon english;
    Lexicon alreadyPlayed;
};

void welcome();
void giveInstructions();
void playBoggle();
static bool responseIsAffirmative(const string &prompt);
void chooseBoard(Game &g);
void customBoardConfig(Game &g, int numOfCubes);
void autoBoardConfig(Game &g, int numOfCubes);
Grid<Cube> shuffleCubes(int numOfCubes);
void humanTurn(Game &g);
bool isLegal(Game &g, string input);
bool canBeFormed(Game &g, Cube c, string input);
Cube adjacentCube(Game &g, Direction &dir, int row, int col);
void highlightCubes(Game &g);
void clearAllHighlights(Game &g);
void computerTurn(Game &g);
void compCanBeFormed(Game &g, Cube c, Player player, string word);
bool compLegalWord(Game &g, string word);
bool inSameLocation(Cube c1, Cube c2);
/* Main program */

// You need to design specific data structures and functions
// to complete this assignment.

int main() {

    welcome();
    if (getYesOrNo("Do you need instructions? ")) {
       giveInstructions();
    }

   playBoggle();
   return 0;
}

/*
 * Function: welcome
 * Usage: welcome();
 * -----------------
 * Print out a cheery welcome message.
 */

void welcome() {
   cout << "Welcome!  You're about to play an intense game ";
   cout << "of mind-numbing Boggle.  The good news is that ";
   cout << "you might improve your vocabulary a bit.  The ";
   cout << "bad news is that you're probably going to lose ";
   cout << "miserably to this little dictionary-toting hunk ";
   cout << "of silicon.  If only YOU had a gig of RAM..." << endl << endl;
}

/*
 * Function: giveInstructions
 * Usage: giveInstructions();
 * --------------------------
 * Print out the instructions for the user.
 */

void giveInstructions() {
   cout << endl;
   cout << "The boggle board is a grid onto which I ";
   cout << "I will randomly distribute cubes. These ";
   cout << "6-sided cubes have letters rather than ";
   cout << "numbers on the faces, creating a grid of ";
   cout << "letters on which you try to form words. ";
   cout << "You go first, entering all the words you can ";
   cout << "find that are formed by tracing adjoining ";
   cout << "letters. Two letters adjoin if they are next ";
   cout << "to each other horizontally, vertically, or ";
   cout << "diagonally. A letter can only be used once ";
   cout << "in each word. Words must be at least four ";
   cout << "letters long and can be counted only once. ";
   cout << "You score points based on word length: a ";
   cout << "4-letter word is worth 1 point, 5-letters ";
   cout << "earn 2 points, and so on. After your puny ";
   cout << "brain is exhausted, I, the supercomputer, ";
   cout << "will find all the remaining words and double ";
   cout << "or triple your paltry score." << endl << endl;
   cout << "Hit return when you're ready...";
   getLine();
}

void playBoggle() {

    //  [TODO: Fill and extend code here]

    GWindow gw(BOGGLE_WINDOW_WIDTH, BOGGLE_WINDOW_HEIGHT);
    gw.setLocation(50,50);
    initGBoggle(gw);
    Game g;
    g.english = Lexicon(kEnglishLexicon);
    while (true) {
        chooseBoard(g);
        humanTurn(g);
        computerTurn(g);
        if (!getYesOrNo("Would you like to play again? ")) break;
    }
    cout << "Thanks for your enjoy! Hit return to quit." << endl;
    exitGraphics();
}
static bool responseIsAffirmative(const string &prompt)
{
    while(true)
    {
        string ans = getLine(prompt);
        if(!ans.empty())
        {
            switch (toupper(ans[0])) {
                case 'Y': return true;
                case 'N': return false;
            }
        }
        cout << "Please answer yes or no." << endl;
    }
}

void chooseBoard(Game &g)
{
    cout << "You can choose standard Boogle (4 x 4 grid) or Big Boggle (5 x 5)." << endl;
    string ans;
    int numOfCubes;
    if(responseIsAffirmative("Would you like Big Boggle?"))
        numOfCubes = kBigBoogleNumOfCubes;
    else
        numOfCubes = kStandardNumOfCubes;
    drawBoard(sqrt((double)numOfCubes), sqrt((double)numOfCubes));
    cout << endl;
    cout << "I will give you a chance to set up the board to ";
    cout << "your specification, which makes it easier to confirm";
    cout << "your boggle program is working." << endl;
    if(responseIsAffirmative("Do you want to force the board configuration? "))
        customBoardConfig(g,numOfCubes);
    else
        autoBoardConfig(g, numOfCubes);

}
void customBoardConfig(Game &g, int numOfCubes)
{
    cout << endl;
    cout << "Enter a" << numOfCubes << "-character string";
    cout << "identify which letters you want on the cubes. " << endl;
    cout << "The first 4 letters are the cubes on the top row ";
    cout << "from left to right, the next 4 letter are the second ";
    cout << "row, and so on." << endl;
    cout << "Enter the string: ";
    string userInputLetters;
    while(true)
    {
        userInputLetters = getLine();
        if(userInputLetters.length() >= numOfCubes)
            break;
        cout << "String must include " << numOfCubes << " characters!";
        cout << " Try again: ";
    }
    int numRowCols = sqrt((double)numOfCubes);
    Grid<Cube> cubes(numRowCols, numRowCols);
    int numSide = 0;
    for(int row = 0; row<numRowCols; row++)
    {
        for(int col = 0; col < numRowCols; col ++ )
        {
            char letter = userInputLetters[numSide];
            labelCube(row, col, letter);
            Cube cube = {false, letter, row, col};
            cubes[row][col] = cube;
            numSide++;
        }
    }
    g.board = cubes;
}

void autoBoardConfig(Game &g, int numOfCubes)
{
    Grid<Cube> cubes = shuffleCubes(numOfCubes);
    g.board = cubes;
    for(int row = 0; row < cubes.numRows(); row++)
    {
        for(int col = 0; col < cubes.numCols(); col++)
        {
            char letter = cubes[row][col].letter;
            labelCube(row, col, letter);
        }
    }
}
Grid<Cube> shuffleCubes(int numOfCubes)
{
    int numRowCols = sqrt((double)numOfCubes);
    Vector<string> vec;
    for(int n = 0; n < numOfCubes; n ++)
    {
        if(numOfCubes == kBigBoogleNumOfCubes)
            vec.add(kBigBoggleCubes[n]);
        if(numOfCubes==kStandardNumOfCubes)
            vec.add(kStandardCubes[n]);
    }
    for(int i=0;i<vec.size();i++)
    {
        int r = randomInteger(i,numOfCubes - 1);
        swap(vec[i],vec[r]);
    }
    int numSide = 0;
    Grid<string> cubeLetters(numRowCols, numRowCols);
    Grid<Cube> finalCubes(cubeLetters.numRows(), cubeLetters.numCols());
    for(int row = 0; row < cubeLetters.numRows(); row++)
    {
        for(int col = 0; col < cubeLetters.numCols(); col++)
        {
            cubeLetters[row][col] = vec[numSide];
            string side = cubeLetters[row][col];
            char letter = side[randomInteger(0,5)];
            Cube cube = {false, letter, row, col};
            finalCubes[row][col] = cube;
            numSide++;
        }
    }
    return finalCubes;
}

void humanTurn(Game &g)
{
    cout << endl;
    cout << "Ok, take all the time you want and find all ";
    cout << "the words you can! Signal that you're finished ";
    cout << "by entering an empty line." << endl << endl;

    Player player = HUMAN;
    string input;

    while(true)
    {
        cout << "Enter a word: ";
        input = getLine();
        if(input == "")
            break;
        input = toUpperCase(input);
        foreach(Cube c, g.board)
        {
            c.flag = false;
            highlightCube(c.row, c.col, false);

        }
        if(input.length()<4)
            cout << "That word does not meet the minimum word length of 4 character. " << endl;
        else if(!(g.english).contains((input)))
            cout << "That is not a word!" << endl;
        else if((g.alreadyPlayed).contains(input))
                cout << "You have already gussed that!" << endl;
        else if(!isLegal(g, input))
            cout << "You can not make that word!" << endl;
        else
        {
            g.alreadyPlayed.add(input);
            recordWordForPlayer(input, player);
        }

    }
}

bool isLegal(Game &g, string input)
{
    string prefix = input.substr(0,2);
    if((g.english).containsPrefix(prefix))
    {
        foreach(Cube c, g.board)
        {
            if(canBeFormed(g,c,input))
                return true;
        }
    }
    return false;

}
bool canBeFormed(Game &g, Cube c, string input)
{
    if(input[0]!=c.letter)
        return false;
    (g.board[c.row][c.col]).flag = true;
    string str = input.substr(1);
    if(str.length()==0)
    {
        highlightCubes(g);
        pause(kPauseTime);
        clearAllHighlights(g);
        (g.board[c.row][c.col]).flag = false;
        return true;
    }
    for(Direction dir = Northwest; dir <= West; dir=Direction(dir+1))
    {
        Cube nextCube = adjacentCube(g,dir,c.row,c.col);
        if(!nextCube.flag && canBeFormed(g,nextCube,str))
        {
            (g.board[c.row][c.col]).flag = false;
            return true;
        }
    }
    (g.board[c.row][c.col]).flag = false;
    return false;
}

Cube adjacentCube(Game &g, Direction &dir, int row, int col)
{
    Cube c2 = g.board[row][col];
    int maxRow = (g.board).numRows() - 1;
    int maxCol = (g.board).numCols() - 1;

    switch (dir) {
    case Northwest:
        if(row != 0 && col != 0)
            c2 = g.board[row-1][col-1];break;
    case North:
        if(row!=0)
            c2 = g.board[row-1][col-1];break;
    case Northeast:
        if(row!=0 && col!=maxCol)
            c2 = g.board[row-1][col+1];break;
    case East:
        if(col != maxCol)
            c2 = g.board[row][col+1];break;
    case Southeast:
        if(row!=maxRow&& col!=maxCol)
            c2 = g.board[row+1][col=1];break;
    case South:
        if(row!=maxRow)
            c2 = g.board[row+1][col];break;
    case Southwest:
        if(row!=maxRow && col != 0)
                    c2 = g.board[row+1][col-1];break;
    case West:
        if(col!=0)
                    c2 = g.board[row][col-1];break;

    }
    return c2;
}



void highlightCubes(Game &g)
{
    foreach(Cube c, g.board)
    {
        if(c.flag)
            highlightCube(c.row,c.col,true);
    }
}
void clearAllHighlights(Game &g)
{
    foreach(Cube c, g.board)
    {
        highlightCube(c.row, c.col, false);
    }
}
void computerTurn(Game &g)
{
    Player player = COMPUTER;
    string word;
    foreach(Cube c, g.board)
    {
        string word(1,c.letter);
        (g.board[c.row][c.col]).flag = true;
        highlightCube(c.row, c.col, true);
        compCanBeFormed(g,c,player,word);
        (g.board[c.row][c.col]).flag = false;
        highlightCube(c.row, c.col, false);
    }
}
void compCanBeFormed(Game &g, Cube c, Player player, string word)
{
    if(compLegalWord(g,word))
    {
        (g.alreadyPlayed).add(word);
        recordWordForPlayer(word,player);
        highlightCube(c.row,c.col,true);
        pause(kPauseTime);
        highlightCube(c.row,c.col,false);
    }
    for(Direction dir = Northwest; dir <= West; dir = Direction(dir + 1))
    {
        Cube nextCube = adjacentCube(g, dir, c.row, c.col);
        string str = word + nextCube.letter;
        if(!nextCube.flag && (g.english).containsPrefix(str) && !(g.alreadyPlayed).contains(str) && !inSameLocation(nextCube,c))
        {
            (g.board[nextCube.row][nextCube.col]).flag = true;
            highlightCube(c.row,c.col,true);
            word = str;
            compCanBeFormed(g, nextCube, player, word);
            word = word.substr(0,word.length()-1);
            (g.board[c.row][c.col]).flag = false;
            highlightCube(c.row, c.col, false);
        }
    }
}
bool compLegalWord(Game &g, string word)
{
    return (word.length()>=4 && (g.english).contains(word) && !(g.alreadyPlayed).contains(word));
}

bool inSameLocation(Cube c1, Cube c2)
{
    return ((c1.row==c2.row) && (c1.col==c2.col));
}


